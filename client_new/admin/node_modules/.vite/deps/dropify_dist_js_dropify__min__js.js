import {
  require_jquery
} from "./chunk-OGVVV2AK.js";
import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/dropify/dist/js/dropify.min.js
var require_dropify_min = __commonJS({
  "node_modules/dropify/dist/js/dropify.min.js"(exports, module) {
    !function(e, i) {
      "function" == typeof define && define.amd ? define(["jquery"], i) : "object" == typeof exports ? module.exports = i(require_jquery()) : e.Dropify = i(e.jQuery);
    }(exports, function(e) {
      function i(i2, t2) {
        if (window.File && window.FileReader && window.FileList && window.Blob) {
          var s = { defaultFile: "", maxFileSize: 0, minWidth: 0, maxWidth: 0, minHeight: 0, maxHeight: 0, showRemove: true, showLoader: true, showErrors: true, errorTimeout: 3e3, errorsPosition: "overlay", imgFileExtensions: ["png", "jpg", "jpeg", "gif", "bmp"], maxFileSizePreview: "5M", allowedFormats: ["portrait", "square", "landscape"], allowedFileExtensions: ["*"], messages: { "default": "Drag and drop a file here or click", replace: "Drag and drop or click to replace", remove: "Remove", error: "Ooops, something wrong appended." }, error: { fileSize: "The file size is too big ({{ value }} max).", minWidth: "The image width is too small ({{ value }}}px min).", maxWidth: "The image width is too big ({{ value }}}px max).", minHeight: "The image height is too small ({{ value }}}px min).", maxHeight: "The image height is too big ({{ value }}px max).", imageFormat: "The image format is not allowed ({{ value }} only).", fileExtension: "The file is not allowed ({{ value }} only)." }, tpl: { wrap: '<div class="dropify-wrapper"></div>', loader: '<div class="dropify-loader"></div>', message: '<div class="dropify-message"><span class="file-icon" /> <p>{{ default }}</p></div>', preview: '<div class="dropify-preview"><span class="dropify-render"></span><div class="dropify-infos"><div class="dropify-infos-inner"><p class="dropify-infos-message">{{ replace }}</p></div></div></div>', filename: '<p class="dropify-filename"><span class="file-icon"></span> <span class="dropify-filename-inner"></span></p>', clearButton: '<button type="button" class="dropify-clear">{{ remove }}</button>', errorLine: '<p class="dropify-error">{{ error }}</p>', errorsContainer: '<div class="dropify-errors-container"><ul></ul></div>' } };
          this.element = i2, this.input = e(this.element), this.wrapper = null, this.preview = null, this.filenameWrapper = null, this.settings = e.extend(true, s, t2, this.input.data()), this.errorsEvent = e.Event("dropify.errors"), this.isDisabled = false, this.isInit = false, this.file = { object: null, name: null, size: null, width: null, height: null, type: null }, Array.isArray(this.settings.allowedFormats) || (this.settings.allowedFormats = this.settings.allowedFormats.split(" ")), Array.isArray(this.settings.allowedFileExtensions) || (this.settings.allowedFileExtensions = this.settings.allowedFileExtensions.split(" ")), this.onChange = this.onChange.bind(this), this.clearElement = this.clearElement.bind(this), this.onFileReady = this.onFileReady.bind(this), this.translateMessages(), this.createElements(), this.setContainerSize(), this.errorsEvent.errors = [], this.input.on("change", this.onChange);
        }
      }
      var t = "dropify";
      return i.prototype.onChange = function() {
        this.resetPreview(), this.readFile(this.element);
      }, i.prototype.createElements = function() {
        this.isInit = true, this.input.wrap(e(this.settings.tpl.wrap)), this.wrapper = this.input.parent();
        var i2 = e(this.settings.tpl.message).insertBefore(this.input);
        e(this.settings.tpl.errorLine).appendTo(i2), this.isTouchDevice() === true && this.wrapper.addClass("touch-fallback"), this.input.attr("disabled") && (this.isDisabled = true, this.wrapper.addClass("disabled")), this.settings.showLoader === true && (this.loader = e(this.settings.tpl.loader), this.loader.insertBefore(this.input)), this.preview = e(this.settings.tpl.preview), this.preview.insertAfter(this.input), this.isDisabled === false && this.settings.showRemove === true && (this.clearButton = e(this.settings.tpl.clearButton), this.clearButton.insertAfter(this.input), this.clearButton.on("click", this.clearElement)), this.filenameWrapper = e(this.settings.tpl.filename), this.filenameWrapper.prependTo(this.preview.find(".dropify-infos-inner")), this.settings.showErrors === true && (this.errorsContainer = e(this.settings.tpl.errorsContainer), "outside" === this.settings.errorsPosition ? this.errorsContainer.insertAfter(this.wrapper) : this.errorsContainer.insertBefore(this.input));
        var t2 = this.settings.defaultFile || "";
        "" !== t2.trim() && (this.file.name = this.cleanFilename(t2), this.setPreview(this.isImage(), t2));
      }, i.prototype.readFile = function(i2) {
        if (i2.files && i2.files[0]) {
          var t2 = new FileReader(), s = new Image(), r = i2.files[0], n = null, o = this, h = e.Event("dropify.fileReady");
          this.clearErrors(), this.showLoader(), this.setFileInformations(r), this.errorsEvent.errors = [], this.checkFileSize(), this.isFileExtensionAllowed(), this.isImage() && this.file.size < this.sizeToByte(this.settings.maxFileSizePreview) ? (this.input.on("dropify.fileReady", this.onFileReady), t2.readAsDataURL(r), t2.onload = (function(e2) {
            n = e2.target.result, s.src = e2.target.result, s.onload = function() {
              o.setFileDimensions(this.width, this.height), o.validateImage(), o.input.trigger(h, [true, n]);
            };
          }).bind(this)) : this.onFileReady(false);
        }
      }, i.prototype.onFileReady = function(e2, i2, t2) {
        if (this.input.off("dropify.fileReady", this.onFileReady), 0 === this.errorsEvent.errors.length) this.setPreview(i2, t2);
        else {
          this.input.trigger(this.errorsEvent, [this]);
          for (var s = this.errorsEvent.errors.length - 1; s >= 0; s--) {
            var r = this.errorsEvent.errors[s].namespace, n = r.split(".").pop();
            this.showError(n);
          }
          if ("undefined" != typeof this.errorsContainer) {
            this.errorsContainer.addClass("visible");
            var o = this.errorsContainer;
            setTimeout(function() {
              o.removeClass("visible");
            }, this.settings.errorTimeout);
          }
          this.wrapper.addClass("has-error"), this.resetPreview(), this.clearElement();
        }
      }, i.prototype.setFileInformations = function(e2) {
        this.file.object = e2, this.file.name = e2.name, this.file.size = e2.size, this.file.type = e2.type, this.file.width = null, this.file.height = null;
      }, i.prototype.setFileDimensions = function(e2, i2) {
        this.file.width = e2, this.file.height = i2;
      }, i.prototype.setPreview = function(i2, t2) {
        this.wrapper.removeClass("has-error").addClass("has-preview"), this.filenameWrapper.children(".dropify-filename-inner").html(this.file.name);
        var s = this.preview.children(".dropify-render");
        if (this.hideLoader(), i2 === true) {
          var r = e("<img />").attr("src", t2);
          this.settings.height && r.css("max-height", this.settings.height), r.appendTo(s);
        } else e("<i />").attr("class", "dropify-font-file").appendTo(s), e('<span class="dropify-extension" />').html(this.getFileType()).appendTo(s);
        this.preview.fadeIn();
      }, i.prototype.resetPreview = function() {
        this.wrapper.removeClass("has-preview");
        var e2 = this.preview.children(".dropify-render");
        e2.find(".dropify-extension").remove(), e2.find("i").remove(), e2.find("img").remove(), this.preview.hide(), this.hideLoader();
      }, i.prototype.cleanFilename = function(e2) {
        var i2 = e2.split("\\").pop();
        return i2 == e2 && (i2 = e2.split("/").pop()), "" !== e2 ? i2 : "";
      }, i.prototype.clearElement = function() {
        if (0 === this.errorsEvent.errors.length) {
          var i2 = e.Event("dropify.beforeClear");
          this.input.trigger(i2, [this]), i2.result !== false && (this.resetFile(), this.input.val(""), this.resetPreview(), this.input.trigger(e.Event("dropify.afterClear"), [this]));
        } else this.resetFile(), this.input.val(""), this.resetPreview();
      }, i.prototype.resetFile = function() {
        this.file.object = null, this.file.name = null, this.file.size = null, this.file.type = null, this.file.width = null, this.file.height = null;
      }, i.prototype.setContainerSize = function() {
        this.settings.height && this.wrapper.height(this.settings.height);
      }, i.prototype.isTouchDevice = function() {
        return "ontouchstart" in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
      }, i.prototype.getFileType = function() {
        return this.file.name.split(".").pop().toLowerCase();
      }, i.prototype.isImage = function() {
        return "-1" != this.settings.imgFileExtensions.indexOf(this.getFileType()) ? true : false;
      }, i.prototype.isFileExtensionAllowed = function() {
        return "-1" != this.settings.allowedFileExtensions.indexOf("*") || "-1" != this.settings.allowedFileExtensions.indexOf(this.getFileType()) ? true : (this.pushError("fileExtension"), false);
      }, i.prototype.translateMessages = function() {
        for (var e2 in this.settings.tpl) for (var i2 in this.settings.messages) this.settings.tpl[e2] = this.settings.tpl[e2].replace("{{ " + i2 + " }}", this.settings.messages[i2]);
      }, i.prototype.checkFileSize = function() {
        0 !== this.sizeToByte(this.settings.maxFileSize) && this.file.size > this.sizeToByte(this.settings.maxFileSize) && this.pushError("fileSize");
      }, i.prototype.sizeToByte = function(e2) {
        var i2 = 0;
        if (0 !== e2) {
          var t2 = e2.slice(-1).toUpperCase(), s = 1024, r = 1024 * s, n = 1024 * r;
          "K" === t2 ? i2 = parseFloat(e2) * s : "M" === t2 ? i2 = parseFloat(e2) * r : "G" === t2 && (i2 = parseFloat(e2) * n);
        }
        return i2;
      }, i.prototype.validateImage = function() {
        0 !== this.settings.minWidth && this.settings.minWidth >= this.file.width && this.pushError("minWidth"), 0 !== this.settings.maxWidth && this.settings.maxWidth <= this.file.width && this.pushError("maxWidth"), 0 !== this.settings.minHeight && this.settings.minHeight >= this.file.height && this.pushError("minHeight"), 0 !== this.settings.maxHeight && this.settings.maxHeight <= this.file.height && this.pushError("maxHeight"), "-1" == this.settings.allowedFormats.indexOf(this.getImageFormat()) && this.pushError("imageFormat");
      }, i.prototype.getImageFormat = function() {
        return this.file.width == this.file.height ? "square" : this.file.width < this.file.height ? "portrait" : this.file.width > this.file.height ? "landscape" : void 0;
      }, i.prototype.pushError = function(i2) {
        var t2 = e.Event("dropify.error." + i2);
        this.errorsEvent.errors.push(t2), this.input.trigger(t2, [this]);
      }, i.prototype.clearErrors = function() {
        "undefined" != typeof this.errorsContainer && this.errorsContainer.children("ul").html("");
      }, i.prototype.showError = function(e2) {
        "undefined" != typeof this.errorsContainer && this.errorsContainer.children("ul").append("<li>" + this.getError(e2) + "</li>");
      }, i.prototype.getError = function(e2) {
        var i2 = this.settings.error[e2], t2 = "";
        return "fileSize" === e2 ? t2 = this.settings.maxFileSize : "minWidth" === e2 ? t2 = this.settings.minWidth : "maxWidth" === e2 ? t2 = this.settings.maxWidth : "minHeight" === e2 ? t2 = this.settings.minHeight : "maxHeight" === e2 ? t2 = this.settings.maxHeight : "imageFormat" === e2 ? t2 = this.settings.allowedFormats.join(", ") : "fileExtension" === e2 && (t2 = this.settings.allowedFileExtensions.join(", ")), "" !== t2 ? i2.replace("{{ value }}", t2) : i2;
      }, i.prototype.showLoader = function() {
        "undefined" != typeof this.loader && this.loader.show();
      }, i.prototype.hideLoader = function() {
        "undefined" != typeof this.loader && this.loader.hide();
      }, i.prototype.destroy = function() {
        this.input.siblings().remove(), this.input.unwrap(), this.isInit = false;
      }, i.prototype.init = function() {
        this.createElements();
      }, i.prototype.isDropified = function() {
        return this.isInit;
      }, e.fn[t] = function(s) {
        return this.each(function() {
          e.data(this, t) || e.data(this, t, new i(this, s));
        }), this;
      }, i;
    });
  }
});
export default require_dropify_min();
/*! Bundled license information:

dropify/dist/js/dropify.min.js:
  (*!
   * =============================================================
   * dropify v0.2.1 - Override your input files with style.
   * https://github.com/JeremyFagis/dropify
   *
   * (c) 2016 - Jeremy FAGIS <jeremy@fagis.fr> (http://fagis.fr)
   * =============================================================
   *)
*/
//# sourceMappingURL=dropify_dist_js_dropify__min__js.js.map
