import {
  require_prop_types
} from "./chunk-CY2I7XHN.js";
import {
  require_react_dom
} from "./chunk-6BKLQ22S.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/react-responsive-pagination/dist/index.js
var import_react11 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/react-responsive-pagination/dist/hooks/usePaginationItems.js
var import_react9 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/helpers/util.js
function sanatizeInteger(maybeInteger) {
  return typeof maybeInteger === "number" && Number.isInteger(maybeInteger) ? maybeInteger : void 0;
}
function sanatizeBoolean(maybeBoolean) {
  return typeof maybeBoolean === "boolean" ? maybeBoolean : void 0;
}
function findLastIndex(array, predicate) {
  for (let k = array.length - 1; k >= 0; k--) {
    if (predicate(array[k]))
      return k;
  }
  return -1;
}
var UnsupportedValueError = class extends Error {
  constructor(value) {
    super("Unsupported value: " + value);
  }
};

// node_modules/react-responsive-pagination/dist/compositionItem.js
function createActivePage(page) {
  return { type: "active", page };
}
function createPage(page) {
  return { type: "page", page };
}
function createNavPrevious(page) {
  return { type: "<", page };
}
function createNavNext(page) {
  return { type: ">", page };
}
function createEllipsis(ellipsisPos) {
  return { type: `…${ellipsisPos}`, page: void 0 };
}
function isNav(item) {
  return item.type === "<" || item.type === ">";
}
function isEllipsis(item) {
  return item.type === "…L" || item.type === "…R";
}
function containsEllipsis(composition) {
  return composition.some(isEllipsis);
}
function isPageWithNumber(item, page) {
  return item.type === "page" && item.page === page;
}
function getLastPage(composition) {
  return Math.max(...composition.filter((item) => item.type === "active" || item.type === "page").map((item) => item.page));
}
function compositionMatches(composition, startIndex, pattern) {
  if (startIndex < 0)
    return;
  return pattern.every((matchItem, patternIndex) => {
    if (!composition[startIndex + patternIndex])
      return false;
    const { type, page } = composition[startIndex + patternIndex];
    if (typeof matchItem === "number") {
      return type === "page" && page === matchItem;
    } else if (matchItem === "#") {
      return type === "page";
    } else if (matchItem === "…") {
      return type === "…L" || type === "…R";
    } else if (matchItem === "*") {
      return type === "active";
    } else {
      throw new UnsupportedValueError(matchItem);
    }
  });
}
function compositionMatchesEnd(composition, endIndex, pattern) {
  return compositionMatches(composition, endIndex - pattern.length + 1, pattern);
}

// node_modules/react-responsive-pagination/dist/helpers/iterator.js
function* zipIterators(xs, ys) {
  while (true) {
    const xResult = xs.next();
    const yResult = ys.next();
    if (xResult.done && yResult.done)
      break;
    yield [xResult.value, yResult.value];
  }
}
function lastWhere(xs, predicate) {
  let lastSoFar;
  for (const x of xs) {
    if (!predicate(x))
      break;
    lastSoFar = x;
  }
  return lastSoFar;
}
function iteratorNext(xs) {
  const xResult = xs.next();
  return xResult.done ? void 0 : xResult.value;
}

// node_modules/react-responsive-pagination/dist/compositions/ranges.js
function* narrowToWidePaginationItemRanges(start, end, collapsePos) {
  for (const range of narrowToWideNumberRanges(start, end, collapsePos)) {
    yield range.map((item) => item === "…" ? createEllipsis(collapsePos) : createPage(item));
  }
}
function* narrowToWideNumberRanges(first, last, collapsePos) {
  const fullWidth = last - first + 1;
  for (let iterationWidth = 1; iterationWidth < fullWidth; iterationWidth++) {
    const range = getCollapsedRange(first, last, iterationWidth, collapsePos);
    if (range)
      yield range;
  }
  yield getFullRange(first, last);
}
function getCollapsedRange(first, last, requiredWidth, collapsePos) {
  if (requiredWidth < 3)
    return;
  const widthOfRange = requiredWidth - 2;
  return collapsePos === "L" ? [first, "…", ...getFullRange(last - (widthOfRange - 1), last)] : [...getFullRange(first, first + (widthOfRange - 1)), "…", last];
}
function getFullRange(start, end) {
  if (end < start)
    return [];
  return Array.from(Array(end - start + 1).keys(), (i) => i + start);
}

// node_modules/react-responsive-pagination/dist/compositions/index.js
function* narrowToWideCompositions({ current, total, narrowBehaviour, renderNav }) {
  if (total < 1)
    return;
  const clampedCurrent = Math.max(1, Math.min(current, total));
  const compositions = narrowToWideCompositionsUnfiltered(clampedCurrent, total, renderNav);
  for (const initialComposition of compositions) {
    if (narrowBehaviour)
      yield* narrowBehaviour(initialComposition);
    yield initialComposition;
    yield* compositions;
  }
}
function* narrowToWideCompositionsUnfiltered(current, total, renderNav) {
  const navPrevious = createNavPrevious(current > 1 ? current - 1 : void 0);
  const navNext = createNavNext(current < total ? current + 1 : void 0);
  const activePage = createActivePage(current);
  const leftRanges = narrowToWidePaginationItemRanges(1, current - 1, "L");
  const rightRanges = narrowToWidePaginationItemRanges(current + 1, total, "R");
  const staggeredPairs = staggeredIterationRightRangeFirst(leftRanges, rightRanges);
  for (const { leftRange, rightRange } of staggeredPairs) {
    if (renderNav) {
      yield [navPrevious, ...leftRange, activePage, ...rightRange, navNext];
    } else {
      yield [...leftRange, activePage, ...rightRange];
    }
  }
}
function* staggeredIterationRightRangeFirst(leftRanges, rightRanges) {
  const zippedRanges = zipIterators(leftRanges, rightRanges);
  const initial = zippedRanges.next();
  if (initial.done)
    return;
  let [leftRange = [], rightRange = []] = initial.value;
  yield { leftRange, rightRange };
  for (const [nextLeftRange, nextRightRange] of zippedRanges) {
    if (nextRightRange) {
      rightRange = nextRightRange;
      yield { leftRange, rightRange };
    }
    if (nextLeftRange) {
      leftRange = nextLeftRange;
      yield { leftRange, rightRange };
    }
  }
}

// node_modules/react-responsive-pagination/dist/paginationItem.js
function compositionToPaginationItems(compositionItems, options) {
  const previousLabel = (options == null ? void 0 : options.previousLabel) || "«";
  const a11yPreviousLabel = (options == null ? void 0 : options.ariaPreviousLabel) || "Previous";
  const nextLabel = (options == null ? void 0 : options.nextLabel) || "»";
  const a11yNextLabel = (options == null ? void 0 : options.ariaNextLabel) || "Next";
  return compositionItems.map(({ type, page }) => {
    switch (type) {
      case "<":
        return {
          type: "previous",
          key: `previous${page === void 0 ? "_disabled" : ""}`,
          label: previousLabel,
          a11yLabel: previousLabel === a11yPreviousLabel ? void 0 : a11yPreviousLabel,
          gotoPage: page
        };
      case ">":
        return {
          type: "next",
          key: `next${page === void 0 ? "_disabled" : ""}`,
          label: nextLabel,
          a11yLabel: nextLabel === a11yNextLabel ? void 0 : a11yNextLabel,
          gotoPage: page
        };
      case "…L":
      case "…R":
        return {
          type: "ellipsis",
          key: `ellipsis_${type === "…L" ? "l" : "r"}`,
          label: "…",
          a11yHidden: true,
          gotoPage: void 0
        };
      default:
        return {
          type: "page",
          key: `${type}_${page}`,
          label: page.toString(),
          gotoPage: page,
          active: type === "active"
        };
    }
  });
}

// node_modules/react-responsive-pagination/dist/hooks/useWidestComposition.js
var import_react8 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/hooks/useAvailableWidth.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/hooks/useContentWidth.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/helpers/style.js
function getElementWidth(element) {
  const style = getComputedStyle(element);
  const overrideInlineMarginStart = style.getPropertyValue("--pagination-override-margin-inline-start");
  const overrideInlineMarginEnd = style.getPropertyValue("--pagination-override-margin-inline-end");
  return styleMetricToInt(overrideInlineMarginStart || style.marginLeft) + getWidth(element) + styleMetricToInt(overrideInlineMarginEnd || style.marginRight);
}
function getContentWidth(element) {
  const style = getComputedStyle(element);
  return element.getBoundingClientRect().width - styleMetricToInt(style.borderLeftWidth) - styleMetricToInt(style.paddingLeft) - styleMetricToInt(style.paddingRight) - styleMetricToInt(style.borderRightWidth);
}
function getNonContentWidth(element) {
  const style = getComputedStyle(element);
  return styleMetricToInt(style.marginLeft) + styleMetricToInt(style.borderLeftWidth) + styleMetricToInt(style.paddingLeft) + styleMetricToInt(style.paddingRight) + styleMetricToInt(style.borderRightWidth) + styleMetricToInt(style.marginRight);
}
function getWidth(element) {
  return element.getBoundingClientRect().width;
}
function styleMetricToInt(styleAttribute) {
  return styleAttribute ? parseInt(styleAttribute) : 0;
}

// node_modules/react-responsive-pagination/dist/helpers/react.js
var import_react = __toESM(require_react(), 1);
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;

// node_modules/react-responsive-pagination/dist/hooks/useContentWidth.js
var import_react_dom = __toESM(require_react_dom(), 1);
function useContentWidth(element) {
  const [width, setWidth] = (0, import_react2.useState)();
  const widthRef = (0, import_react2.useRef)(void 0);
  const syncWidth = (0, import_react2.useCallback)(() => {
    const newWidth = element ? getContentWidth(element) : void 0;
    if (widthRef.current !== newWidth) {
      widthRef.current = newWidth;
      setWidth(newWidth);
    }
  }, [element]);
  useIsomorphicLayoutEffect(syncWidth);
  (0, import_react2.useEffect)(() => {
    if (!element)
      return;
    const resizeObserver = new ResizeObserver(withResizeLoopDetection(() => (0, import_react_dom.flushSync)(syncWidth)));
    resizeObserver.observe(element);
    return () => {
      resizeObserver.disconnect();
    };
  }, [element, syncWidth]);
  return width;
}
function withResizeLoopDetection(callback) {
  return (entries, resizeObserver) => {
    const elements = entries.map((entry) => entry.target);
    const rectsBefore = elements.map((element) => element.getBoundingClientRect());
    callback();
    const rectsAfter = elements.map((element) => element.getBoundingClientRect());
    const changedElements = elements.filter((_, i) => !areRectSizesEqual(rectsBefore[i], rectsAfter[i]));
    changedElements.forEach((element) => unobserveUntilNextFrame(element, resizeObserver));
  };
}
function unobserveUntilNextFrame(element, resizeObserver) {
  resizeObserver.unobserve(element);
  requestAnimationFrame(() => {
    resizeObserver.observe(element);
  });
}
function areRectSizesEqual(rect1, rect2) {
  return rect1.width === rect2.width && rect1.height === rect2.height;
}

// node_modules/react-responsive-pagination/dist/hooks/useAvailableWidth.js
function useAvailableWidth(overrideWidth) {
  const [element, setElement] = (0, import_react4.useState)(null);
  const parentElement = (element == null ? void 0 : element.parentElement) ?? void 0;
  const width = useContentWidth(overrideWidth === void 0 ? parentElement : void 0);
  return {
    width: overrideWidth ?? width,
    ref: setElement
  };
}

// node_modules/react-responsive-pagination/dist/hooks/useFoutDetector.js
var import_react5 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
function useFoutDetector(getElements, handleFout) {
  const containerRef = (0, import_react5.useRef)(null);
  useIsomorphicLayoutEffect(() => {
    const elements = getElements(containerRef.current);
    if (!elements)
      return;
    const widthsAtRender = new Map(elements.map((element) => [element, getWidth(element)]));
    const resizeObserver = new ResizeObserver((entries) => {
      const hasAnElementChangedSignificantly = entries.map((entry) => widthsAtRender.get(entry.target) - getWidth(entry.target)).some((difference) => difference < -0.5 || difference > 0.5);
      hasAnElementChangedSignificantly && (0, import_react_dom2.flushSync)(handleFout);
    });
    elements.forEach((element) => resizeObserver.observe(element));
    return () => resizeObserver.disconnect();
  });
  return containerRef;
}

// node_modules/react-responsive-pagination/dist/hooks/useWidthCalculator.js
var import_react7 = __toESM(require_react(), 1);
function useWidthCalculator() {
  const [widthCalculator, setWidthCalculator] = (0, import_react7.useState)(void 0);
  const clearCache = (0, import_react7.useCallback)(() => setWidthCalculator(void 0), []);
  if (!widthCalculator) {
    return {
      metricsRender: {
        items: itemsToMeasure,
        ref(containerElement) {
          const metrics = getMetricsFromMetricsRender(containerElement);
          metrics && setWidthCalculator(() => createWidthCalculator(metrics));
        }
      },
      clearCache
    };
  }
  return {
    widthCalculator,
    clearCache
  };
}
function getMetricsFromMetricsRender(containerElement) {
  if (!containerElement)
    return;
  return [
    getNonContentWidth(containerElement),
    ...Array.from(containerElement.children).map(getElementWidth)
  ];
}
function createWidthCalculator([outerFrameWidth, pageSingleDigitWidth, pageDoubleDigitWidth, activeSingleDigitWidth, activeDoubleDigitWidth, navPreviousEnabledWidth, navPreviousDisabledWidth, navNextEnabledWidth, navNextDisabledWidth, ellipsisWidth]) {
  const getItemWidth = ({ type, page }) => {
    switch (type) {
      case "page":
        return pageSingleDigitWidth + (pageDoubleDigitWidth - pageSingleDigitWidth) * (page.toString().length - 1);
      case "active":
        return activeSingleDigitWidth + (activeDoubleDigitWidth - activeSingleDigitWidth) * (page.toString().length - 1);
      case "<":
        return page !== void 0 ? navPreviousEnabledWidth : navPreviousDisabledWidth;
      case ">":
        return page !== void 0 ? navNextEnabledWidth : navNextDisabledWidth;
      case "…L":
      case "…R":
        return ellipsisWidth;
      default: {
        const _exCheck = type;
        return _exCheck;
      }
    }
  };
  return (items) => outerFrameWidth + items.reduce((acc, item) => acc + getItemWidth(item), 0);
}
var itemsToMeasure = [
  createPage(8),
  createPage(88),
  createActivePage(8),
  createActivePage(88),
  createNavPrevious(0),
  createNavPrevious(void 0),
  createNavNext(0),
  createNavNext(void 0),
  createEllipsis("L")
];

// node_modules/react-responsive-pagination/dist/hooks/useWidestComposition.js
function useWidestComposition(narrowToWideCompositionsProvider, maxWidth) {
  const { widthCalculator, metricsRender, clearCache } = useWidthCalculator();
  const foutDetectorRef = useFoutDetector(getItemsDomElements, clearCache);
  const { width = 0, ref: availableWidthRef } = useAvailableWidth(maxWidth);
  const ref = (0, import_react8.useCallback)((element) => {
    foutDetectorRef.current = element;
    availableWidthRef == null ? void 0 : availableWidthRef(element);
  }, [foutDetectorRef, availableWidthRef]);
  const [showPlaceholder, setShowPlaceholder] = (0, import_react8.useState)(true);
  if (showPlaceholder) {
    const firstComposition = iteratorNext(narrowToWideCompositionsProvider());
    return {
      visible: false,
      items: firstComposition ?? [],
      ref(containerElement) {
        setShowPlaceholder(false);
        ref(containerElement);
      },
      clearCache
    };
  }
  if (metricsRender) {
    return {
      visible: false,
      items: metricsRender.items,
      ref(containerElement) {
        metricsRender.ref(containerElement);
        ref(containerElement);
      },
      clearCache
    };
  }
  return {
    visible: true,
    items: getLargestFittingCompositionWithFallback(narrowToWideCompositionsProvider, widthCalculator, width),
    ref,
    clearCache
  };
}
function getLargestFittingCompositionWithFallback(getNarrowToWideCompositions, getCompositionWidth, maxWidth) {
  const narrowToWideCompositions2 = getNarrowToWideCompositions();
  const firstComposition = iteratorNext(narrowToWideCompositions2) ?? [];
  const doesCompositionFit = (composition) => getCompositionWidth(composition) < maxWidth;
  return lastWhere(narrowToWideCompositions2, doesCompositionFit) ?? firstComposition;
}
function getItemsDomElements(viewDomElement) {
  return viewDomElement && Array.from(viewDomElement.children);
}

// node_modules/react-responsive-pagination/dist/hooks/usePaginationItems.js
function usePaginationItems(inputCurrent, inputTotal, maxWidth, options) {
  const narrowToWideCompositionsProvider = () => narrowToWideCompositions({
    current: sanatizeInteger(inputCurrent) ?? 0,
    total: sanatizeInteger(inputTotal) ?? 0,
    narrowBehaviour: options == null ? void 0 : options.narrowBehaviour,
    renderNav: sanatizeBoolean(options == null ? void 0 : options.renderNav) ?? true
  });
  const { visible, items: compositionItems, ref, clearCache } = useWidestComposition(narrowToWideCompositionsProvider, maxWidth);
  const previousLabelCacheKey = labelCacheKey(options == null ? void 0 : options.previousLabel);
  const nextLabelCacheKey = labelCacheKey(options == null ? void 0 : options.nextLabel);
  (0, import_react9.useEffect)(() => {
    return () => clearCache();
  }, [clearCache, previousLabelCacheKey, nextLabelCacheKey]);
  const items = compositionToPaginationItems(compositionItems, options);
  return { visible, items, ref, clearCache };
}
function labelCacheKey(item) {
  if ((0, import_react9.isValidElement)(item)) {
    showReactElementLabelWarning();
    switch (typeof item.type) {
      case "string":
        return `element-str-${item.type}`;
      case "function":
        return `element-fn-${item.type.name}`;
      default:
        return "element";
    }
  } else if (Array.isArray(item)) {
    showReactElementLabelWarning();
    return "element-array";
  } else {
    return item;
  }
}
var reactElementLabelWarningShown = false;
function showReactElementLabelWarning() {
  if (reactElementLabelWarningShown)
    return;
  console.log("react-responsive-pagination: using React elements for labels is experimental, please see: https://react-responsive-pagination.elantha.com/faq#using-react-components-for-labels");
  reactElementLabelWarningShown = true;
}

// node_modules/react-responsive-pagination/dist/helpers/dom.js
function preventDefault(handler) {
  return (e) => {
    e.preventDefault();
    handler();
  };
}

// node_modules/react-responsive-pagination/dist/labelBehaviour.js
var import_react10 = __toESM(require_react(), 1);
function defaultLabelBehaviour({ a11yLabel, label }) {
  return !a11yLabel ? label : import_react10.default.createElement("span", { "aria-hidden": "true" }, label);
}
function srOnlySpanLabel({ a11yActiveLabel = "(current)", srOnlyClassName = "sr-only" } = {}) {
  return (item) => {
    const activePage = item.gotoPage !== void 0 && item.active;
    const srOnlyLabel = activePage && a11yActiveLabel ? ` ${a11yActiveLabel}` : item.a11yLabel;
    return import_react10.default.createElement(
      import_react10.default.Fragment,
      null,
      !item.a11yLabel ? item.label : import_react10.default.createElement("span", { "aria-hidden": "true" }, item.label),
      srOnlyLabel && import_react10.default.createElement("span", { className: srOnlyClassName }, srOnlyLabel)
    );
  };
}

// node_modules/react-responsive-pagination/dist/debug.js
var renderCount = 0;
function incRenderCount() {
  renderCount++;
}

// node_modules/react-responsive-pagination/dist/narrowBehaviour.js
function* dropEllipsis(initialComposition, metaData) {
  var _a;
  const indicesToDrop = [];
  if ((_a = metaData == null ? void 0 : metaData.appliedBehaviours) == null ? void 0 : _a.includes(dropFirstAndLast)) {
    const firstPageIndex = initialComposition.findIndex((item) => isPageWithNumber(item, 1));
    if (compositionMatches(initialComposition, firstPageIndex, [1, 2])) {
      indicesToDrop.push(firstPageIndex);
    }
    const n = getLastPage(initialComposition);
    const lastPageIndex = findLastIndex(initialComposition, (item) => isPageWithNumber(item, n));
    if (compositionMatchesEnd(initialComposition, lastPageIndex, [n - 1, n])) {
      indicesToDrop.push(lastPageIndex);
    }
  }
  if (containsEllipsis(initialComposition) || indicesToDrop.length > 0) {
    yield initialComposition.filter((item, index) => !isEllipsis(item) && !indicesToDrop.includes(index));
  }
}
function* dropNav(initialComposition) {
  yield initialComposition.filter((item) => !isNav(item));
}
function* dropFirstAndLast(initialComposition, metaData) {
  var _a;
  const ellipsisDropped = (_a = metaData == null ? void 0 : metaData.appliedBehaviours) == null ? void 0 : _a.includes(dropEllipsis);
  const composition = initialComposition.slice();
  const firstPageIndex = composition.findIndex((item) => isPageWithNumber(item, 1));
  if (ellipsisDropped) {
    if (compositionMatches(composition, firstPageIndex, [1, 2, 3, "*"])) {
      composition.splice(firstPageIndex, 2);
    } else if (compositionMatches(composition, firstPageIndex, [1, "#", "*"])) {
      composition.splice(firstPageIndex, 1);
    }
  } else {
    if (compositionMatches(composition, firstPageIndex, [1, 2, 3, "*"])) {
      composition.splice(firstPageIndex, 2, createEllipsis("L"));
    } else if (compositionMatches(composition, firstPageIndex, [1, "…", "#"])) {
      composition.splice(firstPageIndex, 1);
    }
  }
  const n = getLastPage(composition);
  const lastPageIndex = findLastIndex(composition, (item) => isPageWithNumber(item, n));
  if (ellipsisDropped) {
    if (compositionMatchesEnd(composition, lastPageIndex, ["*", n - 2, n - 1, n])) {
      composition.splice(lastPageIndex - 1, 2);
    } else if (compositionMatchesEnd(composition, lastPageIndex, ["*", "#", n])) {
      composition.splice(lastPageIndex, 1);
    }
  } else {
    if (compositionMatchesEnd(composition, lastPageIndex, ["*", n - 2, n - 1, n])) {
      composition.splice(lastPageIndex - 1, 2, createEllipsis("R"));
    } else if (compositionMatchesEnd(composition, lastPageIndex, ["#", "…", n])) {
      composition.splice(lastPageIndex, 1);
    }
  }
  if (initialComposition.length !== composition.length) {
    yield composition;
  }
}
function* dropEllipsisThenNav(initialComposition) {
  if (containsEllipsis(initialComposition)) {
    yield initialComposition.filter((item) => !isEllipsis(item) && !isNav(item));
    yield initialComposition.filter((item) => !isEllipsis(item));
  } else {
    yield initialComposition.filter((item) => !isNav(item));
  }
}
function* dropNavThenEllipsis(initialComposition) {
  if (containsEllipsis(initialComposition)) {
    yield initialComposition.filter((item) => !isEllipsis(item) && !isNav(item));
  }
  yield initialComposition.filter((item) => !isNav(item));
}
var combine = (...behaviours) => (initialComposition) => combineRecursive(behaviours, [], initialComposition);
function* combineRecursive(behaviours, previousBehaviours, initialComposition) {
  if (behaviours.length === 0)
    return;
  const [firstBehaviour, ...remainingBehaviours] = behaviours;
  const firstBehaviourCompositions = firstBehaviour(initialComposition, {
    appliedBehaviours: previousBehaviours
  });
  const firstResult = firstBehaviourCompositions.next();
  if (firstResult.done) {
    yield* combineRecursive(remainingBehaviours, [...previousBehaviours, firstBehaviour], initialComposition);
  } else {
    const firstComposition = firstResult.value;
    yield* combineRecursive(remainingBehaviours, [...previousBehaviours, firstBehaviour], firstComposition);
    yield firstComposition;
    yield* firstBehaviourCompositions;
  }
}

// node_modules/react-responsive-pagination/dist/presets.js
var v1_bootstrap4PaginationPreset = {
  ariaCurrentAttr: false,
  labelBehaviour: srOnlySpanLabel()
};
var bootstrap4PaginationPreset = {};
var bootstrap5PaginationPreset = {};

// node_modules/react-responsive-pagination/dist/index.js
var ResponsivePaginationComponent = (0, import_react11.memo)(ResponsivePagination);
var dist_default = ResponsivePaginationComponent;
function ResponsivePagination(props) {
  incRenderCount();
  if (true) {
    checkLegacyProps(props);
  }
  const { current, total, onPageChange: handlePageChange, maxWidth, narrowBehaviour, className, extraClassName = "justify-content-center", pageItemClassName = "page-item", pageLinkClassName = "page-link", activeItemClassName = "active", disabledItemClassName = "disabled", navClassName, previousClassName, nextClassName, previousLabel, nextLabel, ariaPreviousLabel, ariaNextLabel, renderNav = true, ariaCurrentAttr = true, linkHref = "hash", labelBehaviour: getLabel = defaultLabelBehaviour } = props;
  const { visible, items, ref, clearCache } = usePaginationItems(current, total, maxWidth, {
    narrowBehaviour,
    previousLabel,
    nextLabel,
    ariaPreviousLabel,
    ariaNextLabel,
    renderNav
  });
  (0, import_react11.useEffect)(() => {
    return () => clearCache();
  }, [
    clearCache,
    className,
    pageItemClassName,
    pageLinkClassName,
    activeItemClassName,
    disabledItemClassName,
    navClassName,
    previousClassName,
    nextClassName
  ]);
  if (items.length === 0)
    return null;
  function getContainerClassName() {
    if (className !== void 0) {
      return className;
    } else if (extraClassName) {
      return `pagination ${extraClassName}`;
    } else {
      return "pagination";
    }
  }
  return import_react11.default.createElement("ul", { className: getContainerClassName(), ref, ...!visible && { style: { visibility: "hidden" } } }, items.map((item) => item.gotoPage !== void 0 ? (
    // item = ClickableItem
    import_react11.default.createElement(
      "li",
      { key: item.key, className: classNames([
        pageItemClassName,
        item.active && activeItemClassName,
        item.type === "next" && (nextClassName ?? navClassName),
        item.type === "previous" && (previousClassName ?? navClassName)
      ]), "aria-current": item.active && ariaCurrentAttr ? "page" : void 0 },
      import_react11.default.createElement("a", { className: pageLinkClassName, href: getHref(linkHref, item.gotoPage), onClick: preventDefault(() => handlePageChange(item.gotoPage)), "aria-label": item.a11yLabel }, getLabel(item))
    )
  ) : (
    // item = NonClickableItem
    import_react11.default.createElement(
      "li",
      { key: item.key, className: classNames([
        pageItemClassName,
        disabledItemClassName,
        item.type === "next" && (nextClassName ?? navClassName),
        item.type === "previous" && (previousClassName ?? navClassName)
      ]), "aria-hidden": item.a11yHidden },
      import_react11.default.createElement("span", { className: pageLinkClassName, "aria-label": item.a11yLabel }, getLabel(item))
    )
  )));
}
function classNames(names) {
  return names.filter((name) => name).join(" ");
}
function getHref(linkHref, page) {
  if (typeof linkHref === "function") {
    return linkHref(page);
  } else if (linkHref === "hash") {
    return "#";
  } else {
    return void 0;
  }
}
ResponsivePagination.propTypes = {
  current: import_prop_types.default.number.isRequired,
  total: import_prop_types.default.number.isRequired,
  onPageChange: import_prop_types.default.func.isRequired,
  maxWidth: import_prop_types.default.number,
  narrowBehaviour: import_prop_types.default.func,
  className: import_prop_types.default.string,
  extraClassName: import_prop_types.default.string,
  pageItemClassName: import_prop_types.default.string,
  pageLinkClassName: import_prop_types.default.string,
  activeItemClassName: import_prop_types.default.string,
  disabledItemClassName: import_prop_types.default.string,
  disabledLinkClassName: import_prop_types.default.string,
  navClassName: import_prop_types.default.string,
  previousClassName: import_prop_types.default.string,
  nextClassName: import_prop_types.default.string,
  previousLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.element]),
  nextLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.element]),
  ariaPreviousLabel: import_prop_types.default.string,
  ariaNextLabel: import_prop_types.default.string,
  renderNav: import_prop_types.default.bool,
  ariaCurrentAttr: import_prop_types.default.bool,
  linkHref: import_prop_types.default.oneOfType([
    import_prop_types.default.func,
    import_prop_types.default.oneOf(["hash", "omit"])
  ]),
  labelBehaviour: import_prop_types.default.func
};
var legacyUsageWarnings = [];
function checkLegacyProps(props) {
  for (const legacyProp of [
    "srOnlyClassName",
    "a11yActiveLabel",
    "narrowStrategy"
  ]) {
    if (props[legacyProp] !== void 0 && !legacyUsageWarnings.includes(legacyProp)) {
      console.warn(`react-responsive-pagination: '${legacyProp}' prop no longer supported, please see migration guide: https://react-responsive-pagination.elantha.com/migration`);
      legacyUsageWarnings.push(legacyProp);
    }
  }
}
export {
  bootstrap4PaginationPreset,
  bootstrap5PaginationPreset,
  combine,
  dist_default as default,
  defaultLabelBehaviour,
  dropEllipsis,
  dropEllipsisThenNav,
  dropFirstAndLast,
  dropNav,
  dropNavThenEllipsis,
  srOnlySpanLabel,
  v1_bootstrap4PaginationPreset
};
//# sourceMappingURL=react-responsive-pagination.js.map
